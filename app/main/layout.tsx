import type { Metadata } from "next";
import { Montserrat } from "next/font/google";
import '@/app/globals.css'
import { UserProvider } from "@auth0/nextjs-auth0/client";
import { Toaster } from "react-hot-toast";
import { Sidebar } from "@/components/sidebar/Sidebar";
import { ThemeProvider } from "@/providers/ThemeProvider";
import CreateModal from "@/components/modals/createModals/CreateModal";
import { Navbar } from "@/components/navbar/Navbar";
import { initialProfile } from "@/lib/initial-profile";
import data from "@/public/json/avatarConfig.json"
import SuccessModal from "@/components/modals/SuccessModal";
import NameModal from "@/components/modals/createModals/NameModal";
import { EmployeesModal } from "@/components/modals/EmployeesModal";
import { getAuditors, getClients, getManagers } from "@/actions/getUsers/getUserByEmail";
import { SocketProvider } from "@/providers/SocketProvider";
import getNotifications from "@/actions/getNotifications/getNotificationByUserId";
import getUnreadNotifications from "@/actions/getNotifications/getUnreadNotifications";
import { getLocalData } from "@/lib/localData";
import { ProfileModal } from "@/components/modals/ProfileModal";

export type JSONData = typeof data;

const font = Montserrat({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Cleo",
  description: "Generated by create next app",
};


/**
 * Renders the application layout with the given children.
 * @param children - the application content to render
 */

export default async function MainLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  const localData = await getLocalData();
  const user = await initialProfile();

  const managers = await getManagers();
  const auditors = await getAuditors();
  const clients = await getClients();
  const notifications = await getNotifications();
  const notificationCount = await getUnreadNotifications();



  return (
    <html lang="en" >
      <UserProvider>
        
        <body className={`${font.className} bg-black overflow-x-hidden`}>
        <ThemeProvider
            attribute="class"
            defaultTheme="light"
            disableTransitionOnChange
          >
            <SocketProvider>

              <CreateModal user={user} managers={managers} auditors={auditors} clients={clients}/>
              <SuccessModal/>
              <NameModal user={user}/>
              <ProfileModal user={user} localData={localData}/>
              {/* <MainComponent localData={localData}/> */}
              <EmployeesModal user={user}/>

              <Toaster/>
              <div>
                <div className="h-screen">
                  <div className=" w-full h-full flex items-center justify-between">
                    <div className="bg-neutral-200 dark:bg-black md:w-[15%] h-full flex items-center justify-center pr-1">
                      <div className="h-full w-full">
                        <Sidebar user={user}/>
                      </div>
                    </div>
                    <div className="bg-white dark:bg-black w-full md:w-[85%] h-full flex items-center justify-center pl-1">
                      <div className=" dark:bg-black h-full w-full">
                        <div className="w-full h-[10%] p-5">
                          <Navbar user={user} notifications={notifications} count={notificationCount}/>
                        </div>
                        <div className="w-full h-[90%] ">
                          {children}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

            </SocketProvider>

          </ThemeProvider>
        </body>
        
      </UserProvider>
    </html>
  );
}
