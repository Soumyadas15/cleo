// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
  MANAGER
  AUDITOR
}




model User {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @unique
  role UserRole? @default(CLIENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  projects Project[]
  members Member[]

  managedProjects Project[] @relation("ProjectManager")
  auditedProjects Project[] @relation("Auditor")
}





model Project {
  id String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  members Member[]
  audits Audit[]

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectManagerId String?
  projectManager User? @relation("ProjectManager", fields: [projectManagerId], references: [id], onDelete: SetNull)

  auditorId String?
  auditor User? @relation("Auditor", fields: [auditorId], references: [id], onDelete: SetNull)
}





model Member {
  id String @id @default(uuid())
  role UserRole @default(CLIENT)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
}





model Audit {
  id String @id @default(uuid())
  
  date DateTime @default(now())
  body String @db.Text

  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
}